{"list":[{"title":"Database","link":"<a href=\"Database.html\">Database</a>"},{"title":"Database#[\"close\"]","link":"<a href=\"Database.html#%255B%2522close%2522%255D\">[\"close\"]</a>","description":"<p>Close the database, and all associated prepared statements.\nThe memory associated to the database and all associated statements\nwill be freed.</p>\n<p><strong>Warning</strong>: A statement belonging to a database that has been closed\ncannot be used anymore.</p>\n<p>Databases <strong>must</strong> be closed when you're finished with them, or the\nmemory consumption will grow forever</p>"},{"title":"Database#[\"create_aggregate\"]","link":"<a href=\"Database.html#%255B%2522create_aggregate%2522%255D\">[\"create_aggregate\"]</a>","description":"<p>Register a custom aggregate with SQLite</p>"},{"title":"Database#[\"create_function\"]","link":"<a href=\"Database.html#%255B%2522create_function%2522%255D\">[\"create_function\"]</a>","description":"<p>Register a custom function with SQLite</p>"},{"title":"Database#[\"each\"]","link":"<a href=\"Database.html#%255B%2522each%2522%255D\">[\"each\"]</a>","description":"<p>Execute an sql statement, and call a callback for each row of result.</p>\n<pre><code>Currently this method is synchronous, it will not return until the callback\nhas been called on every row of the result. But this might change.\n</code></pre>"},{"title":"Database#[\"exec\"]","link":"<a href=\"Database.html#%255B%2522exec%2522%255D\">[\"exec\"]</a>","description":"<p>Execute an SQL query, and returns the result.</p>\n<p>This is a wrapper against\n{@link Database.prepare},\n{@link Statement.bind},\n{@link Statement.step},\n{@link Statement.get},\nand {@link Statement.free}.</p>\n<p>The result is an array of result elements. There are as many result\nelements as the number of statements in your sql string (statements are\nseparated by a semicolon)</p>\n<h2>Example use</h2>\n<p>We will create the following table, named <em>test</em> and query it with a\nmulti-line statement using params:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">age</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Ling</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">Paul</td>\n</tr>\n</tbody>\n</table>\n<p>We query it like that:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>var db = new SQL.Database();\nvar res = db.exec(\n    &quot;DROP TABLE IF EXISTS test;\\n&quot;\n    + &quot;CREATE TABLE test (id INTEGER, age INTEGER, name TEXT);&quot;\n    + &quot;INSERT INTO test VALUES ($id1, :age1, @name1);&quot;\n    + &quot;INSERT INTO test VALUES ($id2, :age2, @name2);&quot;\n    + &quot;SELECT id FROM test;&quot;\n    + &quot;SELECT age,name FROM test WHERE id=$id1&quot;,\n    {\n        &quot;$id1&quot;: 1, &quot;:age1&quot;: 1, &quot;@name1&quot;: &quot;Ling&quot;,\n        &quot;$id2&quot;: 2, &quot;:age2&quot;: 18, &quot;@name2&quot;: &quot;Paul&quot;\n    }\n);\n</code></pre>\n<p><code>res</code> is now :</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    [\n        {&quot;columns&quot;:[&quot;id&quot;],&quot;values&quot;:[[1],[2]]},\n        {&quot;columns&quot;:[&quot;age&quot;,&quot;name&quot;],&quot;values&quot;:[[1,&quot;Ling&quot;]]}\n    ]\n</code></pre>"},{"title":"Database#[\"export\"]","link":"<a href=\"Database.html#%255B%2522export%2522%255D\">[\"export\"]</a>","description":"<p>Exports the contents of the database to a binary array. This\noperation will close and re-open the database which will cause\nany pragmas to be set back to their default values.</p>"},{"title":"Database#[\"getRowsModified\"]","link":"<a href=\"Database.html#%255B%2522getRowsModified%2522%255D\">[\"getRowsModified\"]</a>","description":"<p>Returns the number of changed rows (modified, inserted or deleted)\nby the latest completed INSERT, UPDATE or DELETE statement on the\ndatabase. Executing any other type of SQL statement does not modify\nthe value returned by this function.</p>"},{"title":"Database#[\"handleError\"]","link":"<a href=\"Database.html#%255B%2522handleError%2522%255D\">[\"handleError\"]</a>","description":"<p>Analyze a result code, return null if no error occured, and throw\nan error with a descriptive message otherwise</p>"},{"title":"Database#[\"iterateStatements\"]","link":"<a href=\"Database.html#%255B%2522iterateStatements%2522%255D\">[\"iterateStatements\"]</a>","description":"<p>Iterate over multiple SQL statements in a SQL string.\nThis function returns an iterator over {@link Statement} objects.\nYou can use a for..of loop to execute the returned statements one by one.</p>"},{"title":"Database#[\"prepare\"]","link":"<a href=\"Database.html#%255B%2522prepare%2522%255D\">[\"prepare\"]</a>","description":"<p>Prepare an SQL statement</p>"},{"title":"Database#[\"run\"]","link":"<a href=\"Database.html#%255B%2522run%2522%255D\">[\"run\"]</a>","description":"<p>Execute an SQL query, ignoring the rows it returns.</p>"},{"title":"Database#[\"updateHook\"]","link":"<a href=\"Database.html#%255B%2522updateHook%2522%255D\">[\"updateHook\"]</a>","description":"<p>Registers an update hook with SQLite.</p>\n<p>Every time a row is changed by whatever means, the callback is called\nonce with the change (<code>'insert'</code>, <code>'update'</code> or <code>'delete'</code>), the database\nname and table name where the change happened and the\n<a href=\"https://www.sqlite.org/rowidtable.html\">rowid</a>\nof the row that has been changed.</p>\n<p>The rowid is cast to a plain number. If it exceeds\n<code>Number.MAX_SAFE_INTEGER</code> (2^53 - 1), an error will be thrown.</p>\n<p><strong>Important notes:</strong></p>\n<ul>\n<li>The callback <strong>MUST NOT</strong> modify the database in any way</li>\n<li>Only a single callback can be registered at a time</li>\n<li>Unregister the callback by passing <code>null</code></li>\n<li>Not called for some updates like <code>ON REPLACE CONFLICT</code> and <code>TRUNCATE</code>\n(a <code>DELETE FROM</code> without a <code>WHERE</code> clause)</li>\n</ul>\n<p>See SQLite documentation on\n<a href=\"https://www.sqlite.org/c3ref/update_hook.html\">sqlite3_update_hook</a>\nfor more details</p>"},{"title":"Database.QueryExecResult","link":"<a href=\"Database.html#.QueryExecResult\">QueryExecResult</a>"},{"title":"Database.SqlValue","link":"<a href=\"Database.html#.SqlValue\">SqlValue</a>"},{"title":"SqlJs","link":"<a href=\"global.html#SqlJs\">SqlJs</a>"},{"title":"SqlJsConfig","link":"<a href=\"global.html#SqlJsConfig\">SqlJsConfig</a>"},{"title":"Statement","link":"<a href=\"Statement.html\">Statement</a>"},{"title":"Statement#[\"bind\"]","link":"<a href=\"Statement.html#%255B%2522bind%2522%255D\">[\"bind\"]</a>","description":"<p>Bind values to the parameters, after having reseted the statement.\nIf values is null, do nothing and return true.</p>\n<p>SQL statements can have parameters,\nnamed <em>'?', '?NNN', ':VVV', '@VVV', '$VVV'</em>,\nwhere NNN is a number and VVV a string.\nThis function binds these parameters to the given values.</p>\n<p><em>Warning</em>: ':', '@', and '$' are included in the parameters names</p>\n<h2>Value types</h2>\n<table>\n<thead>\n<tr>\n<th>Javascript type</th>\n<th>SQLite type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>number</td>\n<td>REAL, INTEGER</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>INTEGER</td>\n</tr>\n<tr>\n<td>string</td>\n<td>TEXT</td>\n</tr>\n<tr>\n<td>Array, Uint8Array</td>\n<td>BLOB</td>\n</tr>\n<tr>\n<td>null</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>"},{"title":"Statement#[\"free\"]","link":"<a href=\"Statement.html#%255B%2522free%2522%255D\">[\"free\"]</a>","description":"<p>Free the memory used by the statement</p>"},{"title":"Statement#[\"freemem\"]","link":"<a href=\"Statement.html#%255B%2522freemem%2522%255D\">[\"freemem\"]</a>","description":"<p>Free the memory allocated during parameter binding</p>"},{"title":"Statement#[\"get\"]","link":"<a href=\"Statement.html#%255B%2522get%2522%255D\">[\"get\"]</a>","description":"<p>Get one row of results of a statement.\nIf the first parameter is not provided, step must have been called before.</p>"},{"title":"Statement#[\"getAsObject\"]","link":"<a href=\"Statement.html#%255B%2522getAsObject%2522%255D\">[\"getAsObject\"]</a>","description":"<p>Get one row of result as a javascript object, associating column names\nwith their value in the current row.</p>"},{"title":"Statement#[\"getColumnNames\"]","link":"<a href=\"Statement.html#%255B%2522getColumnNames%2522%255D\">[\"getColumnNames\"]</a>","description":"<p>Get the list of column names of a row of result of a statement.</p>"},{"title":"Statement#[\"getNormalizedSQL\"]","link":"<a href=\"Statement.html#%255B%2522getNormalizedSQL%2522%255D\">[\"getNormalizedSQL\"]</a>","description":"<p>Get the SQLite's normalized version of the SQL string used in\npreparing this statement.  The meaning of &quot;normalized&quot; is not\nwell-defined: see {@link https://sqlite.org/c3ref/expanded_sql.html\nthe SQLite documentation}.</p>"},{"title":"Statement#[\"getSQL\"]","link":"<a href=\"Statement.html#%255B%2522getSQL%2522%255D\">[\"getSQL\"]</a>","description":"<p>Get the SQL string used in preparing this statement.</p>"},{"title":"Statement#[\"reset\"]","link":"<a href=\"Statement.html#%255B%2522reset%2522%255D\">[\"reset\"]</a>","description":"<p>Reset a statement, so that its parameters can be bound to new values\nIt also clears all previous bindings, freeing the memory used\nby bound parameters.</p>"},{"title":"Statement#[\"run\"]","link":"<a href=\"Statement.html#%255B%2522run%2522%255D\">[\"run\"]</a>","description":"<p>Shorthand for bind + step + reset\nBind the values, execute the statement, ignoring the rows it returns,\nand resets it</p>"},{"title":"Statement#[\"step\"]","link":"<a href=\"Statement.html#%255B%2522step%2522%255D\">[\"step\"]</a>","description":"<p>Execute the statement, fetching the the next line of result,\nthat can be retrieved with {@link Statement.get}.</p>"},{"title":"Statement.BindParams","link":"<a href=\"Statement.html#.BindParams\">BindParams</a>"},{"title":"StatementIterator","link":"<a href=\"StatementIterator.html\">StatementIterator</a>"},{"title":"StatementIterator#[\"getRemainingSQL\"]","link":"<a href=\"StatementIterator.html#%255B%2522getRemainingSQL%2522%255D\">[\"getRemainingSQL\"]</a>","description":"<p>Get any un-executed portions remaining of the original SQL string</p>"},{"title":"StatementIterator#[\"next\"]","link":"<a href=\"StatementIterator.html#%255B%2522next%2522%255D\">[\"next\"]</a>","description":"<p>Prepare the next available SQL statement</p>"},{"title":"StatementIterator.StatementIteratorResult","link":"<a href=\"StatementIterator.html#.StatementIteratorResult\">StatementIteratorResult</a>"},{"title":"initSqlJs","link":"<a href=\"global.html#initSqlJs\">initSqlJs</a>","description":"<p>Asynchronously initializes sql.js</p>"},{"title":"module:SqlJs","link":"<a href=\"module-SqlJs.html\">SqlJs</a>"}]}